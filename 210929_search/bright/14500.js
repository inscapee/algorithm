const [size, ...input] = require('fs').readFileSync('/dev/stdin').toString().split('\n');

const [n, m] = size.split(' ');
const board = input.map((row) => row.split(' ').map(s => parseInt(s)));

// w, h, pos
const blocks = [
  [4, 1, [[0, 0], [0, 1], [0, 2], [0, 3]]], // ㅡ
  [1, 4, [[0, 0], [1, 0], [2, 0], [3, 0]]], // |

  [2, 2, [[0, 0], [0, 1], [1, 0], [1, 1]]], // ㅁ

  [2, 3, [[0, 0], [1, 0], [2, 0], [2, 1]]], // L
  [3, 2, [[0, 2], [1, 0], [1, 1], [1, 2]]], 
  [2, 3, [[0, 0], [0, 1], [1, 1], [2, 1]]], 
  [3, 2, [[0, 0], [0, 1], [0, 2], [1, 0]]], 

  [2, 3, [[0, 1], [1, 1], [2, 0], [2, 1]]],
  [3, 2, [[0, 0], [0, 1], [0, 2], [1, 2]]], 
  [2, 3, [[0, 0], [0, 1], [1, 0], [2, 0]]],
  [3, 2, [[0, 0], [1, 0], [1, 1], [1, 2]]],

  [2, 3, [[0, 0], [1, 0], [1, 1], [2, 1]]], // ㄹ
  [3, 2, [[0, 1], [0, 2], [1, 0], [1, 1]]],

  [2, 3, [[0, 1], [1, 0], [1, 1], [2, 0]]],
  [3, 2, [[0, 0], [0, 1], [1, 1], [1, 2]]],

  [2, 3, [[0, 0], [1, 0], [1, 1], [2, 0]]], // ㅏ
  [3, 2, [[0, 1], [1, 0], [1, 1], [1, 2]]],

  [2, 3, [[0, 1], [1, 0], [1, 1], [2, 1]]],
  [3, 2, [[0, 0], [0, 1], [0, 2], [1, 1]]]
]

function solution(n, m, board) {
  let max = 0;

  for (const [w, h, pos] of blocks) {
    for (let r = 0; r <= n - h; r++) {
      for (let c = 0; c <= m - w; c++) {
        let sum = 0;
        for (const [dr, dc] of pos) {
          sum += board[r + dr][c + dc];
        }
        max = Math.max(max, sum);
      }
    }
  }

  console.log(max);
}

solution(n, m, board);
